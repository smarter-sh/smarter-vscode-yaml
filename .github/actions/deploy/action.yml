name: Deploy to Kubernetes
branding:
  icon: "play-circle"
  color: "green"
inputs:
  environment:
    description: "The environment to deploy"
    required: true
  aws-access-key-id:
    description: "The AWS access key ID"
    required: true
  aws-secret-access-key:
    description: "The AWS secret access key"
    required: true
  aws-region:
    description: "The AWS region to deploy to"
    required: true
  openai-api-key:
    description: "The OpenAI API key"
    required: true
  pinecone-api-key:
    description: "The Pinecone API key"
    required: true
  pinecone-environment:
    description: "The Pinecone environment"
    required: true
  google-maps-api-key:
    description: "The Google Maps API key"
    required: true
  gemini-api-key:
    description: "The Gemini API key"
    required: true
  llama-api-key:
    description: "The MetaAI Llama API key"
    required: true
  social-auth-google-oauth2-key:
    description: "The Google OAuth2 key"
    required: true
  social-auth-google-oauth2-secret:
    description: "The Google OAuth2 secret"
    required: true
  social-auth-github-key:
    description: "The GitHub OAuth2 key"
    required: true
  social-auth-github-secret:
    description: "The GitHub OAuth2 secret"
    required: true
  social-auth-linkedin-oauth2-key:
    description: "The LinkedIn OAuth2 key"
    required: true
  social-auth-linkedin-oauth2-secret:
    description: "The LinkedIn OAuth2 secret"
    required: true
  mailchimp-api-key:
    description: "The Mailchimp API key"
    required: true
  mailchimp-list-id:
    description: "The Mailchimp list ID"
    required: true

runs:
  using:
    "composite"
    # -------------------------------------------------------------------------
    # This action is designed to be run on an ephemeral Ubuntu Linux runner.
    # We start with a clean environment and install and configure all the
    # tools we need for this job.
    #
    # The runner is destroyed after the job completes, so we don't need to
    # worry about cleaning up after ourselves.
    # -------------------------------------------------------------------------
  steps:
    # Initialize environment variables that are derived from the inputs
    - name: Initialize environment variables
      shell: bash
      run: |-
        echo "NAMESPACE=${{ env.NAMESPACE_BASE }}-${{ inputs.environment }}" >> $GITHUB_ENV
        echo "DJANGO_SETTINGS_MODULE=${{ env.DJANGO_SETTINGS_BASE }}.${{ inputs.environment }}" >> $GITHUB_ENV
        echo "CACHES_LOCATION=${{ env.REDIS_URL }}" >> $GITHUB_ENV
        echo "CELERY_BROKER_URL=${{ env.REDIS_URL }}" >> $GITHUB_ENV
        echo "CELERY_RESULT_BACKEND=${{ env.REDIS_URL }}" >> $GITHUB_ENV
      env:
        REDIS_URL: redis://:smarter@smarter-redis-master.smarter-platform-${{ inputs.environment }}.svc.cluster.local:6379/1
        DJANGO_SETTINGS_BASE: smarter.settings
        NAMESPACE_BASE: smarter-platform

    # Checkout all code referenced by this action
    - name: Checkout code
      id: checkout_code
      uses: actions/checkout@v4

    # authenticate AWS CLI
    - name: Configure AWS credentials
      id: aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # put an entry in the run log to show the aws cli version and the IAM user
    - name: Check awscli version and identity
      id: awscli-version
      shell: bash
      run: |-
        echo "aws cli version:"
        echo "----------------"
        aws --version
        echo
        echo "aws IAM user:"
        echo "-------------"
        aws sts get-caller-identity

    # install kubectl, which Helm will use to deploy the application
    - name: Install kubectl
      id: kubectl-install
      shell: bash
      run: |-
        sudo snap install kubectl --classic

    # setup kubeconfig using the aws eks helper command, 'update-kubeconfig'
    - name: Configure kubectl
      id: kubectl-configure
      shell: bash
      run: |-
        aws eks --region ${{ inputs.aws-region }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --alias ${{ env.EKS_CLUSTER_NAME }}
        echo "kubectl version and diagnostic info:"
        echo "------------------------------------"
        kubectl version
      env:
        EKS_CLUSTER_NAME: apps-hosting-service

    # install jq, which k8s-get-secret will use to parse the Kubernetes secret
    # and set the environment variables
    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    # connect to Amazon ECR so that we can programmatically
    # figure out the Docker image to add to the Helm values for the
    # Kubernetes deployment manifest.
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # set the Docker image to the environment variable SMARTER_DOCKER_IMAGE
    # example:  012345678903.dkr.ecr.us-east-2.amazonaws.com/smarter-platform-alpha:latest
    - name: Set Docker image
      id: set-docker-image
      shell: bash
      run: |-
        echo "SMARTER_DOCKER_IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO }}:latest" >> $GITHUB_ENV
      env:
        AWS_ECR_REPO: ${{ env.NAMESPACE }}

    # extract the mysql configuration from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # MYSQL_HOST: mysql.service.lawrencemcdaniel.com
    # MYSQL_PORT: 3306
    # MYSQL_DATABASE: smarter_api_dev
    # MYSQL_USER: smarter_api_dev
    # MYSQL_PASSWORD: top-secret-password
    - name: Configure MySQL from Kubernetes secret
      id: get-mysql-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: mysql-smarter

    # extract the mysql root configuration from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # MYMYSQL_ROOT_USERNAMESQL_USER: root
    # MYSQL_ROOT_PASSWORD: top-secret-password
    - name: Configure MySQL from Kubernetes secret
      id: get-mysql-root-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: mysql-root

    # extract the Django admin user credentials from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # SMARTER_LOGIN_URL: https://alpha.platform.smarter.sh/login/
    # SMARTER_ADMIN_USERNAME: admin
    # SMARTER_ADMIN_PASSWORD: top-secret-password
    - name: Configure admin user from Kubernetes secret
      id: get-admin-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: smarter-admin

    # extract the Django SMTP email from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # SMTP_HOST: email-smtp.us-east-2.amazonaws.com
    # SMTP_PORT: "587"
    # SMTP_USE_SSL: "false"
    # SMTP_USE_TLS: "true"
    # SMTP_USERNAME: an IAM key-pair id
    # SMTP_PASSWORD: an IAM key-pair secret
    - name: Configure SMTP email credentials from Kubernetes secret
      id: get-aws-ses-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: aws-ses-config

    # extract the Django application secret from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # SECRET_KEY: top-secret-key
    - name: Configure django secret from Kubernetes secret
      id: get-django-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: smarter-django-secret-key

    # see: https://github.com/helm/helm
    #      we're installing directly from the github repo amd64 binary
    - name: Install Helm
      id: helm-install
      shell: bash
      run: |-
        curl -LO https://get.helm.sh/helm-v3.14.2-linux-amd64.tar.gz
        tar -zxvf helm-v3.14.2-linux-amd64.tar.gz
        sudo mv linux-amd64/helm /usr/local/bin/helm

    # Dump all of our environment variables to the run log
    - name: Dump environment variables
      id: dump-env
      shell: bash
      run: |-
        echo "env"
        echo "-------------------------------"
        env

    - name: Delete failed jobs
      id: delete-failed-jobs
      shell: bash
      run: |-
        kubectl delete job smarter-db-init-job --namespace ${{ env.NAMESPACE }} || true

    - name: Update Helm charts
      id: helm-update
      shell: bash
      run: |-
        cd helm/charts/smarter
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm dependency build

    # Deploy the application to Kubernetes using Helm
    - name: Deploy
      id: deploy
      shell: bash
      run: |-
        helm upgrade --install --force smarter ./helm/charts/smarter/ --namespace ${{ env.NAMESPACE }} \
        --timeout 900s \
        --set deployTimestamp="$(date +%s)" \
        --set env.DJANGO_SETTINGS_MODULE=${{ env.DJANGO_SETTINGS_MODULE }} \
        --set env.ENVIRONMENT=${{ inputs.environment }} \
        --set env.AWS_REGION=${{ inputs.aws-region }} \
        --set env.AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }} \
        --set env.AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }} \
        --set env.NAMESPACE=${{ env.NAMESPACE }} \
        --set env.SMARTER_DOCKER_IMAGE=${{ env.SMARTER_DOCKER_IMAGE }} \
        --set env.ROOT_DOMAIN=smarter.sh \
        --set env.DEBUG_MODE="false" \
        --set env.DUMP_DEFAULTS="True" \
        --set env.MAILCHIMP_API_KEY=${{ inputs.mailchimp-api-key }} \
        --set env.MAILCHIMP_LIST_ID=${{ inputs.mailchimp-list-id }} \
        --set env.OPENAI_API_KEY=${{ inputs.openai-api-key }} \
        --set env.PINECONE_API_KEY=${{ inputs.pinecone-api-key }} \
        --set env.PINECONE_ENVIRONMENT=${{ inputs.pinecone-environment }} \
        --set env.GOOGLE_MAPS_API_KEY=${{ inputs.google-maps-api-key }} \
        --set env.GEMINI_API_KEY=${{ inputs.gemini-api-key }} \
        --set env.LLAMA_API_KEY=${{ inputs.llama-api-key }} \
        --set env.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=${{ inputs.social-auth-google-oauth2-key }} \
        --set env.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=${{ inputs.social-auth-google-oauth2-secret }} \
        --set env.SOCIAL_AUTH_GITHUB_KEY=${{ inputs.social-auth-github-key }} \
        --set env.SOCIAL_AUTH_GITHUB_SECRET=${{ inputs.social-auth-github-secret }} \
        --set env.SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY=${{ inputs.social-auth-linkedin-oauth2-key }} \
        --set env.SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET=${{ inputs.social-auth-linkedin-oauth2-secret }} \
        --set env.MYSQL_HOST=${{ env.MYSQL_HOST }} \
        --set env.MYSQL_PORT=${{ env.MYSQL_PORT }} \
        --set env.MYSQL_DATABASE=${{ env.SMARTER_MYSQL_DATABASE }} \
        --set env.MYSQL_USER=${{ env.SMARTER_MYSQL_USERNAME }} \
        --set env.MYSQL_PASSWORD=${{ env.SMARTER_MYSQL_PASSWORD }} \
        --set env.MYSQL_ROOT_USERNAME=${{ env.MYSQL_ROOT_USERNAME }} \
        --set env.MYSQL_ROOT_PASSWORD=${{ env.MYSQL_ROOT_PASSWORD }} \
        --set env.SECRET_KEY=${{ env.SECRET_KEY }} \
        --set env.SMARTER_LOGIN_URL=${{ env.SMARTER_LOGIN_URL }} \
        --set env.SMARTER_ADMIN_PASSWORD=${{ env.SMARTER_ADMIN_PASSWORD }} \
        --set env.SMARTER_ADMIN_USERNAME=${{ env.SMARTER_ADMIN_USERNAME }} \
        --set env.SMARTER_ADMIN_EMAIL=${{ env.SMARTER_ADMIN_EMAIL }} \
        --set env.SMTP_HOST=${{ env.SMTP_HOST }} \
        --set env.SMTP_PORT=${{ env.SMTP_PORT }} \
        --set env.SMTP_USE_SSL=${{ env.SMTP_USE_SSL }} \
        --set env.SMTP_USE_TLS=${{ env.SMTP_USE_TLS }} \
        --set env.SMTP_USERNAME=${{ env.SMTP_USERNAME }} \
        --set env.SMTP_PASSWORD=${{ env.SMTP_PASSWORD }} \
        --set env.CACHES_LOCATION=${{ env.CACHES_LOCATION }} \
        --set env.CELERY_BROKER_URL=${{ env.CELERY_BROKER_URL }} \
        --set env.CELERY_RESULT_BACKEND=${{ env.CELERY_RESULT_BACKEND }} \
