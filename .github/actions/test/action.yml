---
#------------------------------------------------------------------------------
# - build the Docker image
# - run all unit tests
# - push to AWS ECR
#------------------------------------------------------------------------------
name: Test
branding:
  icon: "check-circle"
  color: "green"
inputs:
  environment:
    description: "The environment to deploy"
    required: true
  aws-access-key-id:
    description: "The AWS access key ID"
    required: true
    type: string
  aws-secret-access-key:
    description: "The AWS secret access key"
    required: true
    type: string
  aws-region:
    description: "The AWS region to deploy to"
    required: true
    type: string
  root-domain:
    description: "The root domain of the project"
    required: true
    type: string
  openai-api-key:
    description: "The OpenAI API key"
    required: true
    type: string
  pinecone-api-key:
    description: "The Pinecone API key"
    required: true
    type: string
  pinecone-environment:
    description: "The Pinecone environment"
    required: true
    type: string
  google-maps-api-key:
    description: "Google Maps API key"
    required: true
    type: string
  mailchimp-api-key:
    description: "Mailchimp API key"
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install docker-compose
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    # Set the Kubernetes namespace based on the environment
    - name: Initialize environment variables
      shell: bash
      run: |-
        echo "NAMESPACE=${{ env.NAMESPACE_BASE }}-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        NAMESPACE_BASE: smarter-platform

    # authenticate AWS CLI
    - name: Configure AWS credentials
      id: aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # put an entry in the run log to show the aws cli version and the IAM user
    - name: Check awscli version and identity
      id: awscli-version
      shell: bash
      run: |-
        echo "aws cli version:"
        echo "----------------"
        aws --version
        echo
        echo "aws IAM user:"
        echo "-------------"
        aws sts get-caller-identity

    # install kubectl, which Helm will use to deploy the application
    - name: Install kubectl
      id: kubectl-install
      shell: bash
      run: |-
        sudo snap install kubectl --classic

    # setup kubeconfig using the aws eks helper command, 'update-kubeconfig'
    - name: Configure kubectl
      id: kubectl-configure
      shell: bash
      run: |-
        aws eks --region ${{ inputs.aws-region }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --alias ${{ env.EKS_CLUSTER_NAME }}
        echo "kubectl version and diagnostic info:"
        echo "------------------------------------"
        kubectl version
      env:
        EKS_CLUSTER_NAME: apps-hosting-service

    # install jq, which k8s-get-secret will use to parse the Kubernetes secret
    # and set the environment variables
    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    #--------------------------------------------------------------------------
    # Build and Configure the Docker image
    #--------------------------------------------------------------------------

    # extract the Django SMTP email from the Kubernetes secret.
    # these will be set as environment variables for the Helm deployment
    #
    # example:
    # SMTP_HOST: email-smtp.us-east-2.amazonaws.com
    # SMTP_PORT: "587"
    # SMTP_USE_SSL: "false"
    # SMTP_USE_TLS: "true"
    # SMTP_USERNAME: an IAM key-pair id
    # SMTP_PASSWORD: an IAM key-pair secret
    - name: Configure SMTP email credentials from Kubernetes secret
      id: get-aws-ses-secret
      uses: ./.github/actions/k8s-get-secret
      with:
        eks-namespace: ${{ env.NAMESPACE }}
        eks-secret-name: aws-ses-config

    # NOTE: we're going to borrow the SMTP credentials from the Kubernetes secret
    # for this environment, since unit tests will send a test email and we don't
    # have a default set of credentials for the local environment.
    - name: Add to .env
      shell: bash
      run: |
        touch .env

        # basic django configuration for local
        # -----------------------
        echo "ROOT_DOMAIN=${{ inputs.root-domain }}" >> .env
        echo "SECRET_KEY=top-secret-key-value" >> .env

        # SMTP email configuration
        # -----------------------
        echo "SMTP_HOST=${{ env.SMTP_HOST }}" >> .env
        echo "SMTP_PORT=${{ env.SMTP_PORT }}" >> .env
        echo "SMTP_USE_SSL=${{ env.SMTP_USE_SSL }}" >> .env
        echo "SMTP_USE_TLS=${{ env.SMTP_USE_TLS }}" >> .env
        echo "SMTP_USERNAME=${{ env.SMTP_USERNAME }}" >> .env
        echo "SMTP_PASSWORD=${{ env.SMTP_PASSWORD }}" >> .env

        # AWS
        # -----------------------
        echo "AWS_REGION=${{ inputs.aws-region }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }}" >> .env

        # AI services
        # -----------------------
        echo "OPENAI_API_KEY=${{ inputs.openai-api-key }}" >> .env
        echo "PINECONE_API_KEY=${{ inputs.pinecone-api-key }}" >> .env
        echo "PINECONE_ENVIRONMENT=${{ inputs.pinecone-environment }}" >> .env
        echo "GEMINI_API_KEY=${{ inputs.gemini-api-key }}" >> .
        echo "LLAMA_API_KEY=${{ inputs.llama-api-key }}" >> .
        echo "GOOGLE_MAPS_API_KEY=${{ inputs.google-maps-api-key }}" >> .env

        # Mailchimp
        # -----------------------
        echo "MAILCHIMP_API_KEY=${{ inputs.mailchimp-api-key }}" >> .env

    #--------------------------------------------------------------------------
    # Test
    # make docker-test
    #--------------------------------------------------------------------------
    - name: Build local and run Python unit tests
      shell: bash
      env:
        ENVIRONMENT: local
        GITHUB_ACTIONS: "true"
        DEBUG_MODE: "true"
      run: |
        make docker-init
        echo "FIX NOTE: ADD PYTHON UNIT TESTS HERE..."
