---
#------------------------------------------------------------------------------
# Pull Request Workflow Controller.
#
# Triggers:
# - Called automatically on relevant actions performed on pull requests.
# - Can also be run manually by clicking the "Run workflow" button.
#
# Actions:
# - Use semantic release rules to determine if a new release will be published.
# - run Python tests, but only if Python-related files have changed.
# - run Terraform tests, but only if Terraform-related files have changed.
# - run ReactJS tests, but only if ReactJS-related files have changed.
# - run pre-commit hooks to ensure code is formatted correctly.
#
# To-Do:
# If a new release is to be published then we want to consider running QA tests
# to ensure formatting and documentation is correct.
#------------------------------------------------------------------------------
name: Pull Request Controller

on:
  workflow_dispatch:

  # GitHub Copilot: The `pull_request` and `pull_request_target` are two different
  # event types in GitHub Actions that trigger workflows when activity related
  # to pull requests occurs.
  # - `pull_request`: This event triggers a workflow run whenever a pull
  #   request is opened, synchronized, or closed. The workflow runs in the context of the
  #   pull request, meaning it has access to the code and environment variables of the head
  #   branch of the pull request. This is safe for pull requests within the same repository,
  #   but for pull requests from a fork, this could potentially expose sensitive information.
  #
  # - `pull_request_target`: This event is similar to `pull_request`, but it runs in the context
  #   of the base of the pull request, rather than the head. This means it has access to the code
  #   and environment variables of the base branch, not the head branch. This is safer for
  #   pull requests from forks, as it prevents the fork from accessing sensitive information
  #   in the base repository. However, it means the workflow does not have access to the code
  #   in the pull request by default. If you need to access the code in the pull request,
  #   you can use the `actions/checkout` action with the `ref` input
  #   set to `github.event.pull_request.head.ref`.
  #
  # In general, use `pull_request` for workflows that need to access the code in the pull request,
  # and `pull_request_target` for workflows that need to be safe for pull requests from forks.
  pull_request:
    types: [opened, synchronize]
    paths:
      - "**.py"
      - "**.js"
      - "**.jsx"
      - "smarter/smarter/static/**"
      - "smarter/smarter/templates/**"
    branches:
      - beta

env:
  AWS_REGION: us-east-2
  ROOT_DOMAIN: "smarter.sh"

jobs:
  check_for_pending_release:
    name: test-semantic-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          dry_run: true
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main',
              'next',
              'next-major',
              {
                name: 'test',
                prerelease: true
              },
              {
                name: 'beta',
                prerelease: true
              },
              {
                name: 'alpha',
                prerelease: true
              }
            ]
          extra_plugins: |
            @semantic-release/git
            @semantic-release/changelog
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Test Outputs
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}

  pre_commit_tests:
    needs: check_for_pending_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('./smarter/requirements/**/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: locate site-packages path
        shell: bash
        run: |
          echo "SITE_PACKAGES_PATH=$(python -c 'import site; print(site.getsitepackages()[0])')" >> $GITHUB_ENV

      - name: Install pip
        shell: bash
        run: |
          python -m pip install --upgrade pip

      - name: Install dependencies
        shell: bash
        run: |
          pip install -r ./smarter/requirements/local.txt
        env:
          SITE_PACKAGES_PATH: ${{ env.SITE_PACKAGES_PATH }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "20.9.0"

      - name: Install npm dependencies
        run: npm install

      - name: Update .pre-commit-config.yaml
        run: |
          pre-commit autoupdate

      - name: Add to .env
        shell: bash
        run: |
          touch .env

      - name: Run pre-commit tests on entire codebase
        shell: bash
        run: |
          make pre-commit-init
          make pre-commit-run

  test:
    needs: pre_commit_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4

      - name: Set environment variable
        id: setenv
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/alpha" ]]; then
            echo "ENVIRONMENT=alpha" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/beta" ]]; then
            echo "ENVIRONMENT=beta" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/next" ]]; then
            echo "ENVIRONMENT=next" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=alpha" >> $GITHUB_ENV
          fi

      - name: Test
        uses: ./.github/actions/test
        with:
          environment: ${{ env.ENVIRONMENT }}
          root-domain: "${{ env.ROOT_DOMAIN }}"
          google-maps-api-key: "${{ secrets.GOOGLE_MAPS_API_KEY }}"
          openai-api-key: "${{ secrets.OPENAI_API_KEY }}"
          pinecone-api-key: "${{ secrets.PINECONE_API_KEY }}"
          pinecone-environment: "${{ secrets.PINECONE_ENVIRONMENT }}"
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mailchimp-api-key: ${{ secrets.MAILCHIMP_API_KEY }}
